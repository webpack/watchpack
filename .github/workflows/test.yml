name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
      - run: npm ci
      - name: Cache eslint result
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: lint-eslint-${{ runner.os }}-node-${{ hashFiles('**/yarn.lock', '**/eslint.config.mjs') }}
          restore-keys: lint-eslint-
      - run: npm run lint
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [10.x, 12.x, 14.x, 16.x, 18.x, 20.x, 22.x, 24.x]
        polling: ["false", "200"]
        exclude:
          - os: macos-latest
            node-version: 10.x
            polling: "200"
          - os: macos-latest
            node-version: 12.x
            polling: "200"
          - os: macos-latest
            node-version: 14.x
            polling: "200"
          - os: macos-latest
            node-version: 16.x
            polling: "200"
          - os: macos-latest
            node-version: 18.x
            polling: "200"
          - os: macos-latest
            node-version: 20.x
            polling: "200"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        id: calculate_architecture
        with:
          result-encoding: string
          script: |
            if ('${{ matrix.os }}' === 'macos-latest' && ('${{ matrix['node-version'] }}' === '10.x' || '${{ matrix['node-version'] }}' === '12.x' || '${{ matrix['node-version'] }}' === '14.x')) {
              return "x64"
            } else {
              return ''
            }
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ steps.calculate_architecture.outputs.result }}
          cache: "npm"
      - run: npm install --ignore-engines
        if: matrix.node-version == '10.x' || matrix.node-version == '12.x' || matrix.node-version == '14.x' || matrix.node-version == '16.x'
      - run: yarn --frozen-lockfile
        if: matrix.node-version != '10.x' && matrix.node-version != '12.x' && matrix.node-version != '14.x' && matrix.node-version != '16.x'
      - run: npm run test:coverage
        env:
          WATCHPACK_POLLING: ${{ matrix.polling }}
      - uses: codecov/codecov-action@v5
        with:
          flags: integration
          token: ${{ secrets.CODECOV_TOKEN }}
